Имя перемнной должно отображать, что именно хочет программист. Они должны быть содержательными.
int d; // прошедшее время - это плохо, а надо
int elapsedTimeInDays;
Не называйте имена перемнных очень популярными словами. Например linux...
Не сохдавайте имена очень похожие, которые отдичаюстя на одну букву и их можно спутать.
Не используйте буквы L и O.
Не делайте так: user1, user2...
Не делайте zork, theZork...
Не делайте Product, ProductInfo, ProductData...
Не используйте зарезервированные имена: variable, table, NameString, CustomerObject.
Используйте слова, котореы удобно произносить.
Правильные имена удобно искать поисковиком.
Короткие имена используйте только для локальных переменных в маленьких методах.
Вместо цифр используйте константы с нормальным названием.
В именах перемнных не надо кодировать их типы и область видимости.
Не используйте в полях класса префикс m_, как было раньше.
В начале интерфейсов не используйте префикс I. (IShapeFactory)
Не давайте имена из одной буквы, если её можно заменить нормальным словом.
Имя класса и объектов должно быть существительным. Не используйте такие слова как Manager, Processor, Data или Info.
Имена методов - глаголы.
В именах методов используйте предикаты get, set и is.
Используйте конструкторы, для создания объектов с аргуменатми (поля класса).
В именах не используйте шутки, крылатые выражения и остроумие.
Выберите одну концепцию и используйте её на всём приложении. (Например get - и везде; или find - и везде) (Например: controller, manager, driver - выбирайте одно из трёх)
Не используйте одно слово, у которого есть разные значения, а разных случаях. (Например add и слова insert и append)
Псипользуйте мена из мира информатики и математики.
В коде, ориентированном на концепции из пространства задач, следует использовать имена из пространства задач.
Старайтесь, чтобы переменные вписывались в контекст. То есть создавая переменные firstName, lastName, street, state, zipCode, они должны быть полями класса Address, чтобы было единогласно понятно, что они относятся к адресу. (стр. 51)
Не включайте избыточный контекст. (То есть не надо писать addressStreet, addressCity и так далее)
Не бойтесь переименовывать, чтобы улучшить код, даже если другие против. 
-
Имена должны передавать намерения программиста. Вместо int d -> int elapsedTimeInDays; daysSinceCreation.
Не используйте именна, у которых есть твёрдый ассоциации. Вместо accountList -> accounts; bunchOfAccounts
Не используйте имена, которые очень похожи и можно попутать.
Старайтесь чтобы новый программист мог понять предназначение класса по его имени, не заглядывая в description (для выбора из выпадающего списка).
Не используйте L и O в перемнных (похожи на 1 и 0).
Если два похожих объекта. Один назван правильно, а второй рандомно (неинформативное название), лишь бы не совпадало (например с ошибкой) - плохой подход: например class и klass; productInfo и productData
Называть a1, a2, ... aN - плохой подход. Лучше source и destination.
Избыточные слова - плохой подход: слово variable в названии переменной; слово table в имени таблицы; nameString -> name; customerInfo -> customer; accountData -> account; theMessage -> message
В названиях не ипользуйте сокращения и аббревиатуры. genymdhms -> generationTimestamp
Выбирайте имена удобные для поиска. int i = 5 -> int WORK_DAYS_PER_WEEK = 5. Int i используйте в локальных методах.
Не кодируйте в именах тип объекта и область видимости.
Не используйте префиксов. IShapeFactory - ShapeFactory -> ShapeFactory - ShapeFactoryImpl
Не создавайте однобуквенных имён, типа и так понятно, что это означает. String r -> Syting lowerCaseUrl
Имя класса (объекта) - сущетсвительное. Избугайте Manager, Processor, Data, Info.
Имея метода - глагол (postPayment, daletePage). Можно начинать с get, set, is.
Если много перегруженных конструкторов: Complex fulcrumPoint = new Complex(23.0) -> Complex fulcrumPoint = Complex.fromRealNumber(23.0). Соответсвующие конструкторы должны быть private.
Не используйте жаргон или шутки.
Выберите один лексикон для всей программы: fetch или retrieve или get; controller или manager или driver.
Не используйте одно слово для разных функциональностей. Если есть add, то можно ещё использовать insert, append.
Можете присваивать имена из мира информатики (не только бизнес логики): AccountVisitor, JobQueue. Имена из пространства решения.
Также имена из пространства задачи.
Названия могут полностью описывать суть. Но можно добавить в контекст: addressCity, addressStreet -> class Address с полями city, stree. Если есть метод, в котором три переменные, из которых генерится message; то лучше создать класс Message, и тогда эти три перемнные будут в контексте и понятно для чего они служат [51].
Не добавляйте избыточный контекст. AccountAddress -> Address accountAddress = new Address()
Не бойтесь переименовывать существующий код.
-
Время, потраченное на придумывание имени, окупится. Изменяйте имя, если найдете лучшие варианты.
Имя переменной должно сообщить почему эта переменная существует, что она делает и как используется.
Если после переменной есть комментарий, занчит она не передает намерений программиста.\
ind d; -> int daysSinceCreation
[стр. 41]
Если массивы и листы - называйте их как сущности, и элементы тоже.
Вместо if (cell[STATUS_VALUE] == FLAGGED), создайте класс, в котором хранится int[] cells и используйте внутренний boolean метод:
if (cell.isFlagged())
Не используйте сокращения и аббревиатуры.
В длинных названиях не делайте два очень похожих.
Вместо accountList -> accounts.
Другой разработчки будет выбирать класс по имени из списка в IDE.
Буквы l и O очень похожи на 1 и 0.
Старайтесь избегать: variable1, variable2 ...
Используетй: source, target.
Избегайте неинформатичных названий: ProductData и ProductInfo.
moneyAmount -> money or amount
customerInfo -> customer
accountData -> account
Если есть перемнная product не называйте вторую theProduct.
Не делайте масло масленное:
не используйте variable в именах переменных (и так понятно, что перемнная)
не используйте table в именах таблиц
не используйте List в именах списков
и т.д.
Не используйте сокращения и аббревиатуры. Названия удобопроизносимые.
Вместо dmy (day-month-year) -> timestamp.
Нормальные имена хороши тем, что их хорошо искать в коде.
Используйте константы вместо цифр.
Длина имени должна сщщтветсвовать размеру его области видимости [N5].
Короткое имя - только для локальных переменных.
Не кодируйте на названии тип объекта.
PhoneNumber phoneString - плохо.
Не называйте интерфейсы в старом стиле: IShapeFactory. Просто ShapeFactory. Реализация: ShapeFactoryImpl.
Имя класса - существительное.
Старайтесь избегать: Manager, Processor, Data, Info.
Имя метода - глагол.
Плюс можно использовать get, set, is.
Исрользуйте билдеры вместо конструкторов с параметрами.
Не используйте шутки и отсылки, известные только вам.
Выберите одно слово для каждой концепции:
fetch, retrieve, get
controller, manager, driver
DeviceManager, ProtocolController
Не используйте слова, у которых много значений (напр. add):
добавить объект в существуюйщий список - add
добавить объект в пустой список - insert
добавить слово в конец предложения - append
  вместо везде add
Не бойтесь присваивать технические имена. Например AccountVisitor, потому что есть паттерн visitor. (имена из простарнства решения)
Именя из пространства задачи - это названия объектов требований.
Используйте контекст когда даёте имена.
Если в коде два раза state. То один переименуйте в addressState, а второй в taxState.
А лучше создайте класс Address.
Когда в методе много переменных - сложите их в отдельный класс, и в классе создайте метод, который управляет этими перемнными (инкапсуляция)
[стр. 51]
Не используйте избыточный контекст. Класс Address а экземпляры accountAddress и customerAddress.
Разные адреса: PostalAddress, MacAddress, UrlAddress - можно.