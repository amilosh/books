Обработка ошибок важна, но если они заслоняют собой логику программы - значит, она реализована неверно.
Плохой способ: вручную в лог записывать возможные ошибки. Хороший способ: обрабатывать с помощью try-catch/ Dj втором случает рабочий метод и метод по обработке ошибок разделены.
Используя try-catch-finally блок try имеет транзакционную природу.
Если у нас есть иерархия из вложенных друг в друга методов. До обработав ошибку на самом низком уровне, нам придётся добавлять обработку ошибки во всех более высоких уровнях. (объявлять throws NewException) (нарушается инкапсуляция, потому что все уровни долдны знать о проверяемом исключении самого низкого уровня)
В блоке catch передавайте всю полезную информацию. (сведения о сбойной операции, тип сбоя, журналирование)
Если один метод может вызвать много разных ошибок и вы хотите все эти ошибки по отдельности перехватить, то используйте обёртки - стр. 136-137.
Стр. 138 - пойму, когда столкнусь. То есть особый случай берётся не через if, а через try cathc/ В этом случае автор рекомендует использовать паттерн Особый случай (Fowler)
Автор сказал, что когда из метода возвращаем объект, то не надо, чтобы возвращался null. Но что с этим делать он так и не объяснил. Привер только пример для возвращения списка, где в методе инициализируется пустой список: retutn Collections.emptyList() (стр. 140)
Делайте так, чтобы нельзя было передать null в метод в качестве аргумента.
-
Если обработка ошибок разбросана по всему коду - значит логика программы реализована неверно.
Используйте исключения вместо кодов ошибок (132). В первом листинге мы делаем действие, которое возвращает статус. И на основании статуса мы идём дальше. То есть выполнение операции и проверка статсу (ошибки) - а одном уровне.
А надо делать ка в листинге 2. Мы делаем оперцию и просто ловим если что-то произойдет. А исключения бросаются во внутренних методах.
Начните с написания команды try-catch-finally. Если вы думаете, что ваш код может что-то выбросить, сразу же пишите try. Причем try {} - действует как транзакция.
Используйте TDD: сначала тест с exception кейсом, а потом код.