Многопоточный код выглядит нормально, пока не заработает под большой нагрузкой.
В однопоточной среде программит ставит дебуг и знает состояние систмеы на момент остановки. Момент выполнения и выполняемая операция совпадают.
Многопоточность - то как работа нескольки компьютеров одновременно.
Пример: веб-конейнер или контейнер EJB. Каждый запрос выполняется асинхронно, контейнер отвечает за многопоточность. Каждый экземпляр сервелета в своём собственном замкнутом мире.
Приложение сбора информации с сайтов. В однопоточной среде: обращаемся к сайту и ждем завершения, поом к следующему. Для повышения производиельности можно воспользоваться многопоточным алгоритмом, параллельно работающим с несколькими сайтами.
Если обслуживать одного пользователя за одну секнду, то если и 60, о придётся ждать одну минуту.
Мифы про многопоточнось:
  мно-сть всегда повышает быстродействие - но олько ри относительно большом времени ожидания
  написание много-го кода не изменяе аритектуру программы - оказывает влияние на аритектуру
  при работте с контейнером разбираься в проблемах мнго программирования не обязательно - надо знать, как рабоает конейнер и как защититься от проблем одновременного обновления и взаимных блокировок
Многопоточность сопряжена с определенными дополнительными затратами - в отношении как производительности, так и написания дополнительног кода.
Правильная реализация мн-сти сложна даже для простых задач.
Ошибки в мн-ке не воопроиводятся, часто игнорируются как случайные отклонения.
Мн-сть часто требует фундаментальных изменений в стартегии проектирования.
Стр. 210 - не понял.
Защита от ошибок многопоточности.
Принцип единой тветственности. Реализация мн-сти должга отделяться от основного кода.
Ограничивайте область видимоси данных. Добавляйте к секции кода слово synchronized. Чем больше мест, в которых обновляются общие данные, то вы забудете защитить одно из них; попытки защитить приведут к дублированию усилий (нарушение DRY).
Используйте копии данных. (стр. описание как использовать копии, чтобы избежать дублирующего чтения).
Потоки должны быть как можно более независимы (не использовать данные совместно с другмим процессами).
Знайте библиотеки. В Java 5 добавились новые возможности. Правила:
  используйте потоково-безопасные коллекции
  используйте механизм Executor Framework для выпонения несвязанных задач
  по возможности используйте неблокирующие решения
  некоторые бмблиотечные классы не являюся потоково-безопасными
Используйте ConcurrentHashMap. И классы из пакета java.util.concurrent.
Модели выполнения.
Модель "производители-потребители". Потоки-произовдители создают задания и помещают их в очередь. Потоки потребители обрабатывают задания из очереди.
Модель "читатели-писатели". Есть общий ресурс. Пистали блокируют его и записывают новые данные. А после этого читатели читают. Если не блокировать - читатали будут брать старые данне. Частые блокировки - страдает производительность. Редкие блкироваки - будут читатсья старые данные. Нужно регулировать.
Модель "обедающих философов". Философы за круглым столом, у каждого одна вилка. Обедать нужно двумя вилками. Если соседи справа и слква едят - у тебя вообще нет вилок, ты ждешь. Философ - поток, вилка - ресурс. Конкуренция за ресурсы. Может привести к блокировкам.
Остерегайтесь зависимостей между синхронизированными методами. (стр. 216 - не понял)
Количество секций в synchronized должно быть как можно меньше. Следовательно код должен иметь как можно меньше критически ссекций. И сами секции - поменьше.
Из-за взаимной блокировки невозможно завершить систему. Нужно писать код, который сможет корректно завершить работу.
Тестирование многопоточного кода. Часто выполняйте код для разных конфигураций и нагрузок. Если тест упал, а потом не удалось воспроизвести - ищите причину. (стр. 218-222 - рекомендации по тестированию многопоточного кода)