Автор написал скедулер, простенько протестировал и залил на прод. Сейчас бы он наспиал кучу тестов, и держал код и тесты вместе.
Три закона TDD:
- не пишите код продукта, пока не напишите отказной модульный тест
- не пишите модульный тест в объеме большемЮ чем необъодимо для отказа. Невозможность компиляции является отказом
- не пишите код продукта в объеме болльшем, чем необъодимо для ппрохождения текущего отказного теста
Тесты и код продукта пишутся вместе, но тесты на несколько секунд раньше.
Тесты нужно писать соблюдая все правила. Иначе изменишь одну строчку в коде, а тесты полдня нужно разбираться и переписывать.
А если откажешься о тестов, то будешь бояться что-то менять.
Чем шире охват тестами, тем больше смелости что-то изменять.
Для тество главное удобочитаемость: ясностть, простота, выразительность.
Стр 154:
 мы должны видеть только то, что тестируем; остальной второстепенный код - это шум - уго нужно выносить в приватные методы
 когда много строк - объединять и в метод и выносить
 код, который в разны тестах - выносить в общий метод
 если идёт несколько строк одинаковых проверок - выносить в метод, с arrayList в качестве парамера
Тест должен быть таким, чтобы с первого взгляда было видно:
 строим тестовые данные
 выполняем операции
 проверяем на expected
Программист строит API для упрощения работы над тестами.
Стр. 158 - автор красиво убрат 5 ассертов в стрингу "HBchL".
Автор говорит, что на проде важна скорость и память. А в теста - читаемость. Поэтому можно использовать конкантенацию строк вместо StringBuffer.
Дейв Астел рекомендует использовать один assert на тест. given-when-then. Если поворяющийся код - исползовать паттерн шаблонный метод.
В одном тесте должны тестироваться одна концепция.
FIRST:
Fast - тесты должны проодить быстро
Independent - тесты д/б независимы друг от друга и выполняться в любом порядке
Repeatable - должны проходить на любом устройстве и среде
Self-Validating - результат теста - ллогический признак - прошел/не прошел
Timely - тесты пишуся до кода