Код никогда не исчезнет.
Однажды одна компания написала приложение, которое использовали многие компани. Но код был плохой. В итоге стали появляться ошибки и компания разорилась.
Мы пишем плохой код по разным причинам. А потом когда возвращаемся, не можем пробраться через его гущи. Мы обещаем вернуться к плохому коду и почистить его завтра. Но есть закон Лнблана: потом равносильно никогда.
Когда начинаем проект, то сначала он идёт быстро. Но через год, когда вносятся дополнения и изменения, нарушается работа в трёх местах и исправления двигаются со скоростью улитки. Производительность приближается к нулю.
А потом начальство принимает решение, чтобы переписать приложение заново с нуля. Иногда это длится долго и иногда история повторяется, когда в новой версии такой же непонятный плохой код.
Ва наверное часто приходилось видеть, как вместо того, чтобы сделать изменение в одном месте, эти изменения нужно вносить во всей программе.
Если код плохой, то мы можем винить кого угодно: начальство, сроки, маркетологов и так далее. Но только мы ответсвенны за чистый код.
Начальники хотят защищать сроки, а вы должны защищать свой код. Начальники хотят слышать правду. (Например пациент говорит врачу не мыть руки, чтобы было быстрее, но вы врач - и вы должны их мыть, чтобы было лучше.)
Профессионалы знают: чтобы выдерживать график, нужно заботиться о чистом коде.
Чистый код - это как искусствоо. Кому то дано. А другим нужно применять все правила, которые вы изучите. Профи должен не только посмотреть на код и сказать, что он грязный, но и знать, что надо делать.
Бьёрн Страуструп: чистый код - элегантный. То есть сочетает простоту и изобретательность, доставляющий удовольствие.
Грязный код - это как принцып разбитых окон.
Хороший код - каждый класс, каждый модуль решает только одну задачу.
Грэди Буч: чистый код - удобочитаемый, как хорошая проза.
Дэйв Томас: чистый код удобно читать и дорабатывать другим людям. Должны быть тесты.
Майкл Физерс: чистый код - это код, над которым автор тщательно поработал, вы не сможете его улучшить.
Рон Джеффрис: чистый код: проходит все тесты; не содержит дубликатов; выражает все концепции проектирования, заложенные в систему; содержит минимальное количество сущностей - классов, методов, функций и т.д. Объект или метод должен выполнять только одну в функцию, в противном случае его надо дробить. Ещё он любит абстракции
Уорд Каннингем: чистый код делает то, что вы ожидали.
Автор говорит, что эта книга - плод усилий многих людей, на протяжении многих лет. Поэтому можете смело применять советы.
На самом деле вы чаще читаем свой старый код, чем пишем новый, поэтмоу чистота кода очень важна.
Правило бойскаута: оставь место стоянки чище, чем оно было до твоего прихода. То есть написать чистый код недостаточно. Нужно поддерживать его во времени. А когда вы встретите плохой код - то сделайте его чище.
После прочтения этой книги автор рекомендует книгу "Agile Software Development: Principles, Patterns, and Practices." 
-
Мы будем рассматривать код сверху вниз, снизу вверх и даже изнутри. Вы узнаете как писать хороший код.
Говорят, что код ичсезнет. Менеджеры будут просто говорить требования, а машины их выполнять. Но код не исчезнет, потому что требования должны быть очень точные, с многими нюансами. И сам человек не в состоянии чётко сформулировать требования. Код - это язык, на котором выражаются потребности.
Хороший код очень важен. Был хороший продукт. Но с скаждой ново версией он становился всё хуже. Потому что был на писан на плохом коде. Компания разорилась.
Каждый из нас видел, что код плохой, но он работает. И откладывал рефакторинг на потом. Закон Леблана: потом равносильно никогда.
Плохой код - это когда делаешь изменение в одном месте, а оно затрагивает три других. Когда тратишь много времени, чтобы понять хитросплетения кода. И чтобы пофиксить что-то или добавить - ещё больше увеличиваешь хитросплетения.
А ещё спешишь успеть к релизу - становится только хуже. Но об этом узнаешь на следующих релизах.
Был случай, когда нужно было переделать с нуля плохой старый код. И компания параллельно поддерживала старый и разрабатывала новый 10 лет. Это плата за плохой код и за непрофессионализм.
За плохой код вина лежит только на нас самих, а не на требованиях заказчика или сроках. Дело в нашем профессионализме.
Маркетологи обращаются к нам за требованиями. Директора - за сроками.
Директора защищают графики, а вы должны защищать свой код. И говорить директору правду.
Единственный способ работать быстро и выдерживать график - постоянно поддерживать чистоту в коде.
Чтобы написать чистый код, необходимо применять множетво приемов, используя чувство 'чистоты', чувство 'кода'. Его можно развить.
Программист, пишущий чистый код - это ходожник, который приводит пустой экран в элегантно запрограммированную систему.
Что такое чистый код?
Бьёрн Страуструп (создатель c++). Код должен быть элегантнам, то есть приятно читать. Зависимости минимльны. Логика прямолинейной. Полня обработка ошибок. Уделять внимание мелочам. Решает одну задачу.
Дэйв Томас и Энди Хант ('Программист-прагматик'). Плохой код - как разбитые окна.
Грэди Буч. Чистый код прост и прямолинеен. Читается как проза. Содержит только то, что необъодимо.
Дэйв Томас. Хорошо читать и дорабатывать. Есть тесты. Минимальные зависимости.
Майкл Физерс. Код выглядит так, словно автор над ним тщательно потрудился. Вы не найдёте улучшений.
Рон Джеффрис. Проходит все тесты. Не содержит дубликатов. Выражает все концепции, заложенные в систему. Содержательность имён. Содержит минимальное количество сущностей. Разделение большого метода, на один с подметодами. Раннее построение абстракиций.Можно искать элемент в массиве, в листе, мапе: я выношу это в абстрактный метод; в будущем реализацию можно будет поменять.
Уорд Каннингем. Если каждая функция делает то, что вы ожидали.
Роберт Мартин. Считайте эту книгу - правилами мастеров, которые сами применяют правила чистого кода. Рекомендации являются плодами десятилетий размышлений, проб и оишбок.
На самом деле мы читам много кода. Поэтому код должен хорошо читаться.
Оставляйте код чище, чем он был до нашего прихода.
Перекликается с другой книгой: принципы, паттерны и практики.
Принцип единой отвественности (SRP), принцып открытости/закрытости (OCP), принцип обращения зависимостей (DIP).
Книга обещает сделать из вас хорошего программиста. Она показывает в каком напрвлении мыслят хорошие программисты и какие приемы и инструменты они применяют.