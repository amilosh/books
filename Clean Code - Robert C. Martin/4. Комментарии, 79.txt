Не комментируйте плохой код - перепишите его.
Если вам нужно написать комментарий - значит вы потерпели неудачу в коде. То есть ли у вас получился запутанный код, в котором сложно разобраться, то вы захотите сделать комментарий. А надо просто изменить код, чтобы он стал понятным.
Комментарии лгут, потому что код изменяется, а программистам лень изменгять комменатрии.
Стр. 81 - можно создать функцию, которая назвается так же, что вы написали в комментарии.
Хорошие комментарии:
1. Юридические комментарии.
Вставляется в начало каждого исходного файла, насчёт авторских прав. (стр. 82)
2. Информативные комментарии.
Иногда можно давать комментарий, что делает функция, но лучше её переименовать так, чтобы было понятно.
3. Представление намерений.
Автор в комментарии указывает, что он пытается сделать.
4. Пояснение.
Если код очень сложный, но он выражает что-то простое, то можно сделать комментарий. (стр. 83)
5. Предупреждайте о последствиях.
Например если тест долговыполняется, или объекты не синхронизированы.
6. Комментарии TODO.
// TODO - и записываете, что надо будет сделать
7. Усиление.
Сделать акцент на маленькой детали, но которая очень важна.
8. Комментарии Javadoc в общедоступных API.
Плохие комментарии:
1. Бормотание.
Не оставляйте комментарий, который понятен только вам. Или, что вы вернётесь к нему чтобы исправить, но забудете.
2. Избыточные комментарии.
Не пишите комментарии, которые и так понятны по коду.
3. Недостоверные комментраии.
Комментарий может вводить в заблеждение, потому что то что делает код, может рассказать только код.
4. Обязательные комментарии.
Автор говорит, что по Javadoc все функции должны быть закомментированы. Но он говорит, что это - монстр и не надо так делать. (стр. 90)
5. Журнальные комментарии.
Раньше, до появления SVC, в начале каждого файла делались журнальные комменатрии вносимых изменений.
6. Шум.
Случаи. когда комментарий бесполезен. Напр. // конструктор по умолчанию. (примеры - стр. 92)
7. Опасный шум.
Например когда копипастишь, то забудешь изменить код на правильный.
8. Старайтесь делать такой код, который был бы понятен без комменатрия.
9. Позиционнеы маркеры.
Используйте заголовки, когда встречаются редко. Потому что, когда они встречаются часто, прогер воспринимает их как шум.
10. Иногда мы используем комменатрии за закрывающимися фигурными скобками, чтобы знать, какая функция завершилась. Но лучше тогда делать так, чтобы функции были короче.
11. До появления SVC писали комментарий, кто написал этот код.
12. Не оставляйте закомментированный код. У нас есть SVC.
13. Комментарии HTML. Комментируйте html-код с помощью IDE, а не звёздочками.
14. Не пишите на локальном уровне комментарий, который отвечает за глобальное пояснение.
15. Слишком много информации.
Не пишите в комменатрий исторический выкладки и так далее.
16. Неочевидные комментарии.
Комментарий должен объяснять код. Плохо когда сам комментарий нуждется в объеснении. (стр.97)
17. Если вы всё объяснили в Javadoc перед функцией, то не надо объяснять каждую строчку кода. (стр.98)
-
Если вы собираетесь написать комментарий, значит вы потерпели неудачу.
Остановитесь и подумайте, можно ли написать код, чтобы было понятно.
Программисты меняют код, но не меняют комментарий, поэтому часто комментарии лгут.
Можно написать функцию, которая делает и назвается так же как и ваш комментарий [стр. 81]
Допустимы комментарии в начале файле с лицензией, копирайтом и т.д.
Комментарий уместен, чтобы привести пример какого-нибудь формата. Нпример формат даты в регулярном выражении.
Можете комментировать код, если используете стороннюю библиотеку [стр. 84].
Можете комментировать, чтобы предупредить других о возможных последствих [стр. 85].
Можно оставлять TODO, если это нельзя сделать прямо сейчас (ждёте релиза и т.д.).
Можно оставить комментарий, если маленький элемент очень важен. И чтобы его не снесли после следующего рефакторинга.
Если пишет API для общего пользования, то комментарии Javadoc обязательны.
Боьшинство комментариев - плохие. Это подпорка для некачественного кода либо мысли вслух программиста.
На [стр. 86] комментарий без кода, и нам непонятно, настройки по умолчанию уже были загружены, или автор вообще забыл доавить код. Это комментарий на скорую руку. Если уж пишите комментарий - то хорошо обдумывайте.
Избыточные комментарии - когда комментарий просто повторяет код [стр. 87].
К тому же этот комментарий недостоверный.
Автор говорит, что не обязатально для каждой функции писать комментарий. Они только загромождяют код, когда из нзвания функций и параметров и так всё понятно.
Журнальные комментарии [стр. 90] - не понял.
Не пишите комментарий над методом, который нормально назван и так понятно что он делает.
Если вы пишите комментарий, и вам уже надоело их писать - форматируйте код [стр. 92]
Если много вложенных функций или идет одна за одной - уберите комментарий и разнесите логику в несколько строк [стр. 93]
Если комментарий - это заголовок перед чередой сходных функций, не делайте это часто, а то превратится в шум.
Некоторые любят комментировать закрывающие фигурные скобки. Лучше форматируйте.
Не надо в комментарии писать, кто добавил код. Гит сам хранит.
Не оставляйте заккоментированный код.
В комментариях не оставляйте html код, чтобы сделать javadoc красивее.
В комментариях не указывайте нелокальную информацию.
Не пиши в комментарии документацию - укажи ссылку.
Плохо, когда нужно смотреть код, чтобы понять комментарий.
Короткая функция с хорошим названием лучше любого комментария.
Не используйте javadoc для внутренних функций - только для API.
[стр. 98] - пример форматирования.