Стр. 122-123. Непонятно. Надо не просто делать поля приватные и доступ через геттеры-сеттеры, а надо делать абстракцию.
Структура данных - это только поля. Объект - это приватные поля и методы доступа к ним. В книге пример с фигурами.
Процедурный код (код, использующий структуры данных) позволяет легко добавлять новые функции без изменения существующих структур данных. ОО код упрощает добавление новых классов без изменения существующих функций.
Не обязательно всегда использовать ООП. Иногда лучше структуры данных и процедуры.
Закон Деметры - модуль не должен знать внутреннее устройство тех объектов, с которыми работает.(Если Вы хотите, чтобы собака побежала, глупо командовать её лапами, лучше отдать команду собаке, а она уже разберётся со своими лапами сама.) (подробно стр. 126)
Крушение поезда - стр. 126 - не понял ничего.
Не используйте гибриды - то есть к классе есть важные функции, а также есть открытые перменные.
Короче стр. 126-128 - непонятно. Может потом разберусь с увеличением опыта.
Что-то про DTO - опять непонятно. Автору не нравятся бины (pojo). 
-
 - Абстракция данных (121)
Автор сетует что сейчас по умолчанию все ставят геттеры, сеттеры.
Скрывать реализацию и делать поля приватными нужно, чтобы создавать абстракции (интерфесы). Пользователь должен работать с Entity, а не с полями.
Пример: координата. Мы должны открыть только сеттер, у которого две переменные сразу (чтобы нельзя было создать координату с одной ординатой)
Пример: двигатель. У него есть поля: объём и уровень топлива. Не надо предоставлять доступ по геттерам. Нужно предоставить метод: getFuleInPercents. (даже если мы внутри поменяем логику, клиенту не нужно будет ничего менять).
Вместо раскрытия структуры - представление данны на абстрактном уровне.
Не надо бездумно лепить геттеры сеттеры
 - Ассиметрия данны/объектов (123)
Структура данных - предоставляет доступ к данным напрямую.
Объект - скрвает данные за абстракциями и методами.
Есть фигуры и класс Shape.
Два подхода.
Процедурный. В фигура мы только задаем данные. А в Shape - метод area, внутри которого используем instanceOf. Если добавм perimeter - нам не нужно менять все фигуры, но придётся опять instanceOf. - Легко добавлять новые методы без изменения классов. Использование структур данных.
ООП. Все фигуры наследуют метод area()
(125 курсив)
 - Закон Деметры (126)
Модуль взамодействет с объектами. И он не должен знать о внутренностях этих объектов.
Нельзя делать так: a.getB().getMethodFromB(); -> лучше разделить по строчкам
Надо разобраться для чего нам из контекста класса a аж вызывать getMethodFromB(). И разбравшись - сделать один метод a.getMethodFromA() который делает то же что и getMethodFromB(). В общем отрефакторить.
DTO - квинтессенция структуры данных. Джава бины - автор считает, что это псевдоинкапсуляция.
Active Records (акивные записи) (129) - соодержат методы save и find. Преобразование таблиц.
Вся суть на стр. 130