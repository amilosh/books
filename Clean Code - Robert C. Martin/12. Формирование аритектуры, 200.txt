Аритектура может сичаться "простой", если она:
-обепечивает проождение всех тестов
  система должна быть конролируемой - за счет тестов;  ведет к компакным ПЕО классам - проще писать тесты - повышает -качетсов проектирования
  чем больше тестов пишем, тем чащу испольуем DIP, внедрение зависимостей, интерфейсы, абстракции, минимизация привязок
  тесты помогают рефакторингу
-не содержит дублирующегося кода
  стр. 202: boolean isEmpty() {return size() == 0;}
  выделяется дублирующий кд в тдельный метод - с разу видно нарущение ПЕО - меод можно переместить в другой класс
  стр. 203: патерн Шаблонный меод (пример с vacation policy)
-выражает намерения программиста
  пока пишешь сам - код поняте; но нужно писать, чтобы другим было понятно
  нужен правилный выбор имён
  компактные классы и методы
  если используешь паттерн - включай название в название класса (команда, посетитель, фабрика)
  читая тесты разработчик должен понять, что делает класс
  после того как код начал работать, нужно вернуться и сделать рефакторинг, чтобы он стал понятным, читаемым
-использует минимальное количество классов и методов
  но и сследить, чтобы классов и методов не плодилось слишком много
Качественное проектирование программных продуктов:
-повышение связности
-усранение жестких привязок
-разделение ответственности
-изобляция системных областей оветственности
-сокращение объема функций и классов
выбор более содержательных имен