Часто приходится использовать сторонний код (библиотеки).
Если мы (как библитека) вернем клиенту Map, то он может вызвать .clear(), оят нам хочется запретить это делать.
Вместо Map надо возваращать Map<Sensor> (не нужно будет приводить после get). Но и в эом случае, если в Java изменится релизация Map, то нам нужно будет контролировать все sensors.get(sensorId).
А если сделаь как на (144) то getById всегда будет одинаково, а если что-то ппроизойдёт с Map, то нам нужно будет поменять только в одном месте.
Автор не рекомендует возвращать Map и сунуть Map в параметры в API.
Если вы не уверены в стороннем API, можно написать тесты (BeckTDD).
Стр. 145 - приводит пример, что если использовать log4j, то будут ошибки. Поэтому автор заранее написал тесты и в них проверил либу.
Тести полезны, если либ а меняет версию.
Автор разработывал программу, котороая должны была дёргать API, но API ещё не была написана. И тогда они написали свой класс Trasmitter Adapter, который имитировал API. А когда API было готово, то этот адаптер стал идной точкой вода в API. (Паттерн адаптер)
Делайте так, чтобы если либа меняестя сильно, чтобы у вас изменений бало по минимуму.
Вывод:
надо писать тесты
ипользуйте обёртки, чтобы дергать свой класс, а не либу постоянно; а либу олько в одном месте внутри обертки
используйте адаптеры