Когда чувак видит ваш проект он думает: "Если код такой неаккуратный, значит и все остальные аспекты сделаны хоть бы как."
Выберите правила форматирования и придерживайтесь их.
Код надо писать чисто ещё и потому, чтобы потом можно было хорошо добавлять и изменять.
Стр. 104 - красивый рисунок, сколько строк в каждом файле разных программ.
Газетная метафора. Файла должны быть похожи на газетную статью: сначал заголовок. Потом крактое содержание. И так - сверу вниз с увеличением подробностей.
Package, import, class и методы надо разделять пустыми строками.
Между классом и полями не нужно пустой строки. Между полями и методами - пустая строка.
То есть строки, между которыми есть тесная связь, должны быть сжаты по вертикали.
Концепции, тесно связанные друг с другом, должны находиться поблизости друг от друга по вертикали.
Переменные следует объявлять как можно ближе к месту использования.
Переменные, управляющие циклом - объявлять внутри цикла. (стр. 108)
Переменные эксземпляров - объявляются в начале класса.
Самая старшая функция должна быть вверху. А те функции, которые вызываются старшей - внизу. (Нисходящий порядок)
Когда у функций концептуальное родство - они должны быть рядом. (Например группа функций выполняет аналогичные операции)
Автор не имеет ничего против строк в 100 и 120 символов, но это вызвано небрежностью программиста.
Горизонтальное форматирование у меня нормально.
Автор советует: return a*a + b*b.
Горизонтальное выравнивание у меня нормально.
Отступы - у меня нормально.
Цикл for надо записывать в три строки со скобкой. 
Если работаете в группе, заранее договаривайтесь, как будете форматировать код.
Стр. 118 - пример чистого кода от автора.
-
Выберите набор правил форматирования, которые будут соблюдать команда.
Вы думаете, что главное - чтобы программа работала. Но когда вам нужно будет менять функиональность, код должен быть удобочитаем, сопровождаемым, расширяемым.
Исходный файл должен выглядеть как газетная статья: заголовок, краткое содержание и вниз с подробностями.
Имени файла должно быть достаточно, чтобы понять, что в нём находится.
Отделяйте пустыми строками логические блоки.
Если объекты похожи - наоборот, соединяйте. Например переменные класса; поля класса и т.п.
Если две концепции тесно связаны -- должны идти один под одним, чтобы не круить вниз-вверх.
Переменные обьявлять как можно ближе к использованию.
Переменные экземпляров - в начале класса.
Если одна функция вызывает другую - должны идти сверху вниз.
Если функции очень похожи (assertTrue, asertFalse) - то тоже надо рядом держать.
- Горизонтальное форматирование (112)
Авор установил 120 символов.
Автор не ставит пробелы со знаком умножения.
Автор отказался от выравнивания полей класса по горизонтали.
Использует левые отступы. Не пишет ифы или методы в одну строчку.
while без кода (117)
Для одного проекта все разрабы должны придерживаться единого стиля форматирования.